{{- if eq .Values.oslc.flow_kind "uninstall" }}
{{- $envAll := . }}

---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: {{ $envAll.Release.Name }}
spec:
  entrypoint: {{ $envAll.Release.Name }}
  serviceAccountName: openstacklcm-argo-sa
  templates:
  - name: {{ $envAll.Release.Name }}
    steps:
    # Check that the Service is actually deployed (i.e. Operational Stage exists)
    - - name: {{ .Values.serviceName }}-check-flow-startpoint
        template: check-flow-startpoint

    # Drain Traffic
    - - name: {{ .Values.serviceName }}-start-trafficdrain
        template: create-trafficdrain
    - - name: {{ .Values.serviceName }}-wait-trafficdrain-completion
        template: wait-trafficdrain-completion

    # Delete Helm Release and Kubernetes Related Objects
    - - name: {{ .Values.serviceName }}-start-delete
        template: create-delete
    - - name: {{ .Values.serviceName }}-wait-delete-completion
        template: wait-delete-completion

    # Delete StartPoint (i.e. Operational Stage)
    - - name: {{ .Values.serviceName }}-cleanup-startpoint
        template: cleanup-startpoint
        continueOn:
           failed: true

    # Create EndPoint (i.e. Planning Stage)
    - - name: {{ .Values.serviceName }}-create-endpoint
        template: create-endpoint
        continueOn:
           failed: true

  - name: check-flow-startpoint
    activeDeadlineSeconds: {{ .Values.phases.timeout.wait_phase_operational }}
    retryStrategy:
      limit: {{ .Values.phases.retries.wait_phase_operational }}
    resource:
      action: get
      successCondition: status.actualState == deployed
      manifest: |
        apiVersion: openstacklcm.airshipit.org/v1alpha1
        kind: OperationalPhase
        metadata:
          name: {{ .Values.serviceName }}-operational

  - name: create-trafficdrain
    activeDeadlineSeconds: {{ .Values.phases.timeout.enable_phase_trafficdrain }}
    retryStrategy:
      limit: {{ .Values.phases.retries.enabled_phase_trafficdrain }}
    resource:
      action: create
      manifest: |
        apiVersion: openstacklcm.airshipit.org/v1alpha1
        kind: TrafficDrainPhase
        metadata:
          name: {{ .Values.serviceName }}-trafficdrain
          ownerReferences:
          - apiVersion: argoproj.io/v1alpha1
            blockOwnerDeletion: true
            kind: Workflow
            name: {{ printf "%s" "{{workflow.name}}" | quote }}
            uid: {{ printf "%s" "{{workflow.uid}}" | quote }}
        spec:
          openstackServiceName: {{ .Values.serviceName }}
          targetOpenstackServiceVersion: moc.version.to.trafficdrain.to
          targetState: deployed
          source:
            type: tar
            location: /opt/openstacklcm-operator/helm-charts/{{ .Values.serviceName }}
          # initDB: "true"
          # config: null

  - name: wait-trafficdrain-completion
    activeDeadlineSeconds: {{ .Values.phases.timeout.wait_phase_trafficdrain }}
    retryStrategy:
      limit: {{ .Values.phases.retries.wait_phase_trafficdrain }}
    resource:
      action: get
      successCondition: status.actualState == deployed
      failureCondition: status.actualState == failed
      manifest: |
        apiVersion: openstacklcm.airshipit.org/v1alpha1
        kind: TrafficDrainPhase
        metadata:
          name: {{ .Values.serviceName }}-trafficdrain

  - name: create-delete
    activeDeadlineSeconds: {{ .Values.phases.timeout.enable_phase_delete }}
    retryStrategy:
      limit: {{ .Values.phases.retries.enabled_phase_delete }}
    resource:
      action: create
      manifest: |
        apiVersion: openstacklcm.airshipit.org/v1alpha1
        kind: DeletePhase
        metadata:
          name: {{ .Values.serviceName }}-delete
          ownerReferences:
          - apiVersion: argoproj.io/v1alpha1
            blockOwnerDeletion: true
            kind: Workflow
            name: {{ printf "%s" "{{workflow.name}}" | quote }}
            uid: {{ printf "%s" "{{workflow.uid}}" | quote }}
        spec:
          openstackServiceName: {{ .Values.serviceName }}
          targetOpenstackServiceVersion: moc.version.to.delete.to
          targetState: deployed
          source:
            type: tar
            location: /opt/openstacklcm-operator/helm-charts/{{ .Values.serviceName }}
          purgeDB: "true"
          # config: null

  - name: wait-delete-completion
    activeDeadlineSeconds: {{ .Values.phases.timeout.wait_phase_delete }}
    retryStrategy:
      limit: {{ .Values.phases.retries.wait_phase_delete }}
    resource:
      action: get
      successCondition: status.actualState == deployed
      failureCondition: status.actualState == failed
      manifest: |
        apiVersion: openstacklcm.airshipit.org/v1alpha1
        kind: DeletePhase
        metadata:
          name: {{ .Values.serviceName }}-delete

  - name: cleanup-startpoint
    activeDeadlineSeconds: {{ .Values.phases.timeout.enable_phase_operational }}
    retryStrategy:
      limit: {{ .Values.phases.retries.enabled_phase_operational }}
    resource:
      action: delete
      manifest: |
        apiVersion: openstacklcm.airshipit.org/v1alpha1
        kind: OperationalPhase
        metadata:
          name: {{ .Values.serviceName }}-operational

  - name: create-endpoint
    activeDeadlineSeconds: {{ .Values.phases.timeout.enable_phase_planning }}
    retryStrategy:
      limit: {{ .Values.phases.retries.enabled_phase_planning }}
    resource:
      action: create
      manifest: |
        apiVersion: openstacklcm.airshipit.org/v1alpha1
        kind: PlanningPhase
        metadata:
          name: {{ .Values.serviceName }}-planning
          # We don't want the flow to own the final endpoint
          # ownerReferences:
          # - apiVersion: argoproj.io/v1alpha1
          #   blockOwnerDeletion: true
          #   kind: Workflow
          #   name: {{ printf "%s" "{{workflow.name}}" | quote }}
          #   uid: {{ printf "%s" "{{workflow.uid}}" | quote }}
        spec:
          openstackServiceName: {{ .Values.serviceName }}
          targetOpenstackServiceVersion: moc.version.to.planning.to
          targetState: deployed
          source:
            type: tar
            location: /opt/openstacklcm-operator/helm-charts/{{ .Values.serviceName }}
{{ end }}
